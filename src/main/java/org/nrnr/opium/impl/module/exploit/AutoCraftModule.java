package org.nrnr.opium.impl.module.exploit;

import org.nrnr.opium.api.config.Config;
import org.nrnr.opium.api.config.setting.BooleanConfig;
import org.nrnr.opium.api.config.setting.ItemListConfig;
import org.nrnr.opium.api.event.EventStage;
import org.nrnr.opium.api.event.listener.EventListener;
import org.nrnr.opium.api.module.ModuleCategory;
import org.nrnr.opium.api.module.ToggleModule;
import org.nrnr.opium.impl.event.TickEvent;
import net.minecraft.client.gui.screen.recipebook.RecipeResultCollection;
import net.minecraft.item.Item;
import net.minecraft.item.Items;
import net.minecraft.recipe.RecipeEntry;
import net.minecraft.screen.CraftingScreenHandler;
import net.minecraft.screen.slot.SlotActionType;

import java.util.List;

public class AutoCraftModule extends ToggleModule {
    Config<Boolean> ghostFixConfig = new BooleanConfig("GhostFix", "Fixes item ghosting issue on some servers", false);
    Config<Boolean> shiftclick = new BooleanConfig("Shift-Click", "Fixes item ghosting issue on some servers", false);
    Config<Boolean> drop = new BooleanConfig("Drop", "Fixes item ghosting issue on some servers", false);
    Config<List<Item>> whitelistConfig = new ItemListConfig<>("Whitelist", "Valid item whitelist", Items.WHITE_BED);
    public AutoCraftModule() {
        super("AutoCraft", "Automatically crafts", ModuleCategory.EXPLOITS);
    }

    // TODO плейс верстака
    @EventListener
    public void onTick(TickEvent event) {
        if (event.getStage() != EventStage.POST) return;
        if (mc.interactionManager == null) return;
        if (whitelistConfig.getValue().isEmpty()) return;

        if (!(mc.player.currentScreenHandler instanceof CraftingScreenHandler currentScreenHandler)) return;


        if (ghostFixConfig.getValue())
            mc.player.getInventory().updateItems();
        List<RecipeResultCollection> recipeResultCollectionList = mc.player.getRecipeBook().getOrderedResults();
        for (RecipeResultCollection recipeResultCollection : recipeResultCollectionList) {
            for (RecipeEntry<?> recipe : recipeResultCollection.getRecipes(true)) {
                if (!((ItemListConfig<?>) whitelistConfig).contains(recipe.value().getResult(mc.world.getRegistryManager()).getItem()))
                    continue;
                mc.interactionManager.clickRecipe(currentScreenHandler.syncId, recipe, shiftclick.getValue());
                mc.interactionManager.clickSlot(currentScreenHandler.syncId, 0, 1,
                        drop.getValue() ? SlotActionType.THROW : SlotActionType.QUICK_MOVE, mc.player);
            }
        }
    }
}




