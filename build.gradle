buildscript {
	repositories {
		gradlePluginPortal()
		mavenCentral()
	}
	dependencies {
		classpath 'com.gradleup.shadow:shadow-gradle-plugin:9.0.0-beta4'
		classpath 'de.undercouch:gradle-download-task:5.4.0'
	}
}

plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'com.gradleup.shadow' version '9.0.0-beta4'
	id 'maven-publish'
}

apply plugin: 'com.gradleup.shadow'
apply plugin: 'java'

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	accessWidenerPath = file("src/main/resources/opium.accesswidener")
}

repositories {
	mavenCentral()
	maven { url 'https://maven.fabricmc.net/' }
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroup 'org.ladysnake'
			includeGroupByRegex 'dev\\.onyxstudios.*'
		}
	}
	maven { url 'https://jitpack.io' } // Added JitPack for Discord RPC fork
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	include modImplementation("org.ladysnake:satin:2.0.0")
	include modImplementation('io.github.0x3c50.renderer:renderer-fabric:1.2')
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Replace the old Discord RPC dependency with the new one
	include modImplementation("com.github.Vatuu:discord-rpc:1.6.2")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {
		// Add repositories to publish to here if needed
	}
}

// Grunt configuration
def gruntUrl = 'https://github.com/SpartanB312/Grunt/releases/download/2.4.4.241224/grunt-main.jar' // Corrected URL for Grunt
def gruntJar = file("$buildDir/tools/grunt.jar") // Path where grunt.jar will be downloaded
def inputJar = file("$buildDir/libs/${project.archives_base_name}-${project.version}.jar") // Your built mod
def outputJar = file("$buildDir/libs/${project.archives_base_name}-${project.version}-obfuscated.jar") // Obfuscated mod output

// Task to download Grunt
tasks.register('downloadGrunt', de.undercouch.gradle.tasks.download.Download) {
	src gruntUrl
	dest gruntJar
	onlyIf { !gruntJar.exists() } // Skip download if already exists
}

// Grunt config file path
def gruntConfigFile = file("$projectDir/grunt-config/opium-grunt.json")

// Task to update grunt-config.json based on the version in gradle.properties
tasks.register('updateGruntConfig') {
	doLast {
		def version = project.version // Get version from gradle.properties or build.gradle

		if (gruntConfigFile.exists()) {
			// Load the config JSON file as a map
			def jsonSlurper = new groovy.json.JsonSlurper()
			def config = jsonSlurper.parse(gruntConfigFile)

			// Update the Input and Output paths with the current version
			config.Settings.Input = "build/libs/opium-${version}.jar"
			config.Settings.Output = "build/libs/opium-${version}-obf.jar"

			// Save the modified config back to the file
			def jsonBuilder = new groovy.json.JsonBuilder(config)
			gruntConfigFile.text = jsonBuilder.toPrettyString()

			println "Updated grunt-config.json with version ${version}"
		} else {
			throw new GradleException("grunt-config.json not found at ${gruntConfigFile}")
		}
	}
}

// Task to obfuscate the mod
tasks.register('obfuscateMod', Exec) {
	dependsOn build, downloadGrunt, updateGruntConfig // Ensure mod is built, Grunt is downloaded, and config is updated

	commandLine 'java', '-jar', gruntJar,
			'--input', inputJar,
			'--output', outputJar,
			'--config', gruntConfigFile

	doLast {
		println "Obfuscated mod saved to: $outputJar"
	}
}

apply plugin: 'de.undercouch.download'

// Ensure obfuscation happens after building
build.finalizedBy obfuscateMod
